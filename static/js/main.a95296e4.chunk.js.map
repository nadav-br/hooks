{"version":3,"sources":["disable.js","Example.js","App.js","serviceWorker.js","index.js"],"names":["Disable","disable","useContext","context","console","log","useState","disabled","setDisable","onClick","Example","count","setCount","useEffect","document","title","React","createContext","App","users","setUsers","placeHolder","a","async","fetch","place","json","data","map","user","name","id","email","Provider","value","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAgBeA,G,MAbC,WAEZ,IAAMC,EAAUC,qBAAWC,GAC3BC,QAAQC,IAAIJ,GAHM,MAIaK,oBAAS,GAJtB,mBAIXC,EAJW,KAIDC,EAJC,KAMlB,OACI,6BACG,4BAAQD,SAAUA,EAAUE,QAAS,WAAKD,EAAWP,KAArD,uBCQIS,MAjBf,WAAoB,IAAD,EACSJ,mBAAS,GADlB,mBACVK,EADU,KACHC,EADG,KAOjB,OAJAC,qBAAU,WACRC,SAASC,MAAT,sBAAgCJ,EAAhC,aAIA,6BACE,0CAAgBA,EAAhB,UACA,4BAAQF,QAAS,kBAAMG,EAASD,EAAQ,KAAxC,cCPOR,EAAUa,IAAMC,gBAgDdC,EA9CJ,WAAO,IAAD,EAEgBZ,oBAAS,GAFzB,mBAERC,EAFQ,KAEEC,EAFF,OAGWF,mBAAS,GAHpB,mBAGRK,EAHQ,KAGDC,EAHC,OAIUN,mBAAS,IAJnB,mBAIRa,EAJQ,KAIFC,EAJE,KAMfP,qBAAU,WACRQ,MACA,IAGF,IAAMA,EAAc,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACEE,MAAM,+CADR,cACZC,EADY,kBAAAH,EAAA,MAECG,EAAMC,QAFP,OAEZC,EAFY,OAGlBP,EAASO,GACTvB,QAAQC,IAAIsB,GAEZH,MAAM,oDANY,sCAgBpB,OACE,oCAEE,0CAAgBb,EAAhB,UACA,4BAAQJ,SAAUA,EAAUE,QAAS,WACnCG,EAASD,EAAQ,GACjBH,GAAW,KAFb,SAVKW,EAAMS,KAAI,SAAAC,GAEf,OAAO,6BAAMA,EAAKC,KAAMD,EAAKE,GAAtB,IAA2BF,EAAKG,UAczC,kBAAC7B,EAAQ8B,SAAT,CAAkBC,OAAO,GACzB,kBAAC,EAAD,OAEA,kBAAC,EAAD,QCnCgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS3B,SAAS4B,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a95296e4.chunk.js","sourcesContent":["import React, { useContext, useState } from 'react'\r\nimport {context} from './App' \r\n\r\nconst Disable = () => {\r\n\r\n    const disable = useContext(context)\r\n    console.log(disable)\r\n    const [disabled, setDisable] = useState(false)\r\n\r\n    return (\r\n        <div>\r\n           <button disabled={disabled} onClick={()=>{setDisable(disable)}}>click to Disable</button> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Disable;  \r\n","import React, { useState, useEffect } from 'react';\r\n\r\nfunction Example() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    document.title = `You clicked ${count} times`;\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <p>You clicked {count} times</p>\r\n      <button onClick={() => setCount(count + 1)}>\r\n        Click me\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Example;","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Disabled from './disable';\nimport Example from './Example'\n\nexport const context = React.createContext();\n\nconst App =() => {\n\n  const [disabled, setDisable] = useState(false)\n  const [count, setCount] = useState(0);\n  const [users,setUsers] = useState([])\n  \n  useEffect(() => {    \n    placeHolder()\n  },[])\n\n\n  const placeHolder = async () => {\n    const place = await fetch('https://jsonplaceholder.typicode.com/users')\n    const data = await place.json()\n    setUsers(data)\n    console.log(data)\n\n    fetch('https://react-hooks-update-c8dad.firebaseio.com/')\n  }\n\n  const renderUsers = () =>{\n    return users.map(user => {\n\n      return <div>{user.name}{user.id} {user.email}</div>\n    })\n  }\n\n  return (\n    <>\n      {/* <button disabled={disabled} onClick={() => setDisable(true)}>click</button>    */}\n      <p>You clicked {count} times</p>\n      <button disabled={disabled} onClick={() => {\n        setCount(count + 1)\n        setDisable(true)\n      }\n    }>count</button>\n    {renderUsers()}\n    <context.Provider value={true}>\n    <Disabled />\n    </context.Provider>\n    <Example />\n    \n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}